{"pageProps":{"note":{"id":"8af8ad5e-138c-4471-b670-3d3474d07401","title":"Erlang","desc":"","updated":1625481523541,"created":1602246697398,"custom":{},"fname":"lang.erlang","type":"note","vault":{"fsPath":".","name":"vault","selfContained":true},"contentHash":"cd002081e72e7708926e7f90de88c841","links":[],"anchors":{"erlang":{"type":"header","text":"Erlang","value":"erlang","line":8,"column":0,"depth":1},"tail-recursive-efficiency":{"type":"header","text":"tail recursive efficiency","value":"tail-recursive-efficiency","line":10,"column":0,"depth":2},"implementation-of-erlang-maps":{"type":"header","text":"Implementation of Erlang Maps","value":"implementation-of-erlang-maps","line":22,"column":0,"depth":2},"advanced-stuff-about-list-sizes-and-sharing":{"type":"header","text":"Advanced stuff about list sizes and sharing","value":"advanced-stuff-about-list-sizes-and-sharing","line":26,"column":0,"depth":2},"gb-tree-stuff":{"type":"header","text":"GB Tree stuff","value":"gb-tree-stuff","line":29,"column":0,"depth":2},"when-to-use-ok-tuple":{"type":"header","text":"When to use ok tuple","value":"when-to-use-ok-tuple","line":32,"column":0,"depth":2},"data-comparisons":{"type":"header","text":"Data Comparisons","value":"data-comparisons","line":38,"column":0,"depth":2},"try-catch-vs-catch":{"type":"header","text":"try catch vs catch","value":"try-catch-vs-catch","line":41,"column":0,"depth":2},"good-resources":{"type":"header","text":"Good resources","value":"good-resources","line":46,"column":0,"depth":2},"ets-scalability":{"type":"header","text":"ETS Scalability","value":"ets-scalability","line":50,"column":0,"depth":2},"behaviours":{"type":"header","text":"Behaviours","value":"behaviours","line":54,"column":0,"depth":2},"applications":{"type":"header","text":"Applications","value":"applications","line":57,"column":0,"depth":3},"supervisors":{"type":"header","text":"Supervisors","value":"supervisors","line":66,"column":0,"depth":3},"gen_server":{"type":"header","text":"gen_server","value":"gen_server","line":71,"column":0,"depth":3},"gen_statem":{"type":"header","text":"gen_statem","value":"gen_statem","line":82,"column":0,"depth":3},"process-management":{"type":"header","text":"Process management","value":"process-management","line":83,"column":0,"depth":4},"state-handling-and-transitions":{"type":"header","text":"State handling and transitions","value":"state-handling-and-transitions","line":92,"column":0,"depth":4},"interpreting-erl_crash-dump":{"type":"header","text":"Interpreting erl_crash dump","value":"interpreting-erl_crash-dump","line":117,"column":0,"depth":2},"docker-erlang-stuff":{"type":"header","text":"Docker erlang stuff","value":"docker-erlang-stuff","line":120,"column":0,"depth":2},"run-erlang-using-docker-container":{"type":"header","text":"run erlang using docker container","value":"run-erlang-using-docker-container","line":122,"column":0,"depth":3}},"children":["fbc7b495-4e18-4547-a795-9afa2805635a","14c34d7c-644d-4cb8-9df3-d94cefa8fa74","ac615334-69f5-4f93-9ec1-7baf7006485e"],"parent":"b9686e84-d9a1-4dbb-8474-1a9c156d6d12","data":{}},"body":"<h1 id=\"erlang\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#erlang\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Erlang</h1>\n<h1 id=\"erlang-1\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#erlang-1\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Erlang</h1>\n<h2 id=\"tail-recursive-efficiency\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#tail-recursive-efficiency\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>tail recursive efficiency</h2>\n<ul>\n<li>Use foldr for simple building of lists (even if it needs reversing)</li>\n<li>simple building of lists i.e. size N input, size N output</li>\n<li>summary of references\n<ul>\n<li>foldr is generally faster as it avoids lists:reverse and uses the heap space it creates for all processing</li>\n<li>foldl will be slower, if it needs a lists:reverse as we duplicate the memory allocation for the new list then use processing to garbage collect original list.</li>\n<li>foldl will always be faster if a lists:reverse is not needed i.e. we don't care about order </li>\n</ul>\n</li>\n</ul>\n<p><em>References</em>\n<a href=\"http://erlang.2086793.n4.nabble.com/Efficiency-of-a-list-construction-td3538122.html#a3538379\">http://erlang.2086793.n4.nabble.com/Efficiency-of-a-list-construction-td3538122.html#a3538379</a>\n<a href=\"https://ferd.ca/erlang-s-tail-recursion-is-not-a-silver-bullet.html\">https://ferd.ca/erlang-s-tail-recursion-is-not-a-silver-bullet.html</a></p>\n<h2 id=\"implementation-of-erlang-maps\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#implementation-of-erlang-maps\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Implementation of Erlang Maps</h2>\n<ul>\n<li><a href=\"https://medium.com/@jlouis666/breaking-erlang-maps-1-31952b8729e6\">https://medium.com/@jlouis666/breaking-erlang-maps-1-31952b8729e6</a></li>\n<li>uses sorted array <a href=\"http://www.mathcs.emory.edu/~cheung/Courses/323/Syllabus/Map/ordered-map.html\">http://www.mathcs.emory.edu/~cheung/Courses/323/Syllabus/Map/ordered-map.html</a></li>\n</ul>\n<h2 id=\"advanced-stuff-about-list-sizes-and-sharing\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#advanced-stuff-about-list-sizes-and-sharing\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Advanced stuff about list sizes and sharing</h2>\n<p><em>Reference: <a href=\"http://erlang.org/doc/efficiency_guide/processes.html\">http://erlang.org/doc/efficiency_guide/processes.html</a></em></p>\n<h2 id=\"gb-tree-stuff\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#gb-tree-stuff\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>GB Tree stuff</h2>\n<p><em>Reference: <a href=\"http://erlang.2086793.n4.nabble.com/gb-trees-and-dict-performance-td4715001.html\">http://erlang.2086793.n4.nabble.com/gb-trees-and-dict-performance-td4715001.html</a></em></p>\n<h2 id=\"when-to-use-ok-tuple\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#when-to-use-ok-tuple\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>When to use ok tuple</h2>\n<pre class=\"language-erlang\"><code class=\"language-erlang\"><span class=\"token operator\">-</span><span class=\"token atom\">spec</span> <span class=\"token punctuation\">{</span><span class=\"token atom\">ok</span><span class=\"token punctuation\">,</span> <span class=\"token atom\">some_value</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> <span class=\"token punctuation\">{</span><span class=\"token atom\">error</span><span class=\"token punctuation\">,</span> <span class=\"token atom\">reason</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<p><em>Reference: <a href=\"https://medium.com/@bruno_sapienza/when-to-return-the-ok-in-elixir-10c3c336870#:~:text=it&#x27;s%20common%20to%20return%20tagged,related%20value(s)%20like%20the\">https://medium.com/@bruno_sapienza/when-to-return-the-ok-in-elixir-10c3c336870#:~:text=it's%20common%20to%20return%20tagged,related%20value(s)%20like%20the</a></em></p>\n<h2 id=\"data-comparisons\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#data-comparisons\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Data Comparisons</h2>\n<p><a href=\"https://www.theerlangelist.com/article/sequences\">https://www.theerlangelist.com/article/sequences</a></p>\n<h2 id=\"try-catch-vs-catch\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#try-catch-vs-catch\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>try catch vs catch</h2>\n<p>catch will always generate a stacktrace when catching an exception, so it slower, than try.\ntry avoids building a stacktrace if you don't ask for it\n<a href=\"https://www.programmersought.com/article/91291342145/\">https://www.programmersought.com/article/91291342145/</a></p>\n<h2 id=\"good-resources\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#good-resources\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Good resources</h2>\n<p><a href=\"https://adoptingerlang.org/docs/cheat_sheets/\">https://adoptingerlang.org/docs/cheat_sheets/</a>\n<a href=\"http://beam-wisdoms.clau.se/en/latest/\">http://beam-wisdoms.clau.se/en/latest/</a></p>\n<h2 id=\"ets-scalability\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#ets-scalability\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>ETS Scalability</h2>\n<p><a href=\"https://www.researchgate.net/publication/262172496_On_the_scalability_of_the_Erlang_term_storage\">https://www.researchgate.net/publication/262172496_On_the_scalability_of_the_Erlang_term_storage</a>\n<a href=\"http://blog.erlang.org/the-new-scalable-ets-ordered_set/#benchmark\">http://blog.erlang.org/the-new-scalable-ets-ordered_set/#benchmark</a></p>\n<h2 id=\"behaviours\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#behaviours\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Behaviours</h2>\n<p>Not all OTP behaviours are listed here, only thee most frequently-used ones.</p>\n<h3 id=\"applications\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#applications\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Applications</h3>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Trigger</th><th>Called By</th><th>Handled By</th><th>Return</th><th>Description</th></tr></thead><tbody><tr><td><code>application:start/1-2</code></td><td>client or booting VM</td><td><code>start(Type, Args)</code></td><td><code>{ok, pid()} &#x26;#124; {ok, pid(), State}</code></td><td>should start the root supervisor</td></tr><tr><td><code>{start_phases, [{Phase, Args}]}</code> in app file</td><td>kernel booting the app</td><td><code>start_phase(Phase, Type, Args)</code></td><td><code>ok &#x26;#124; {error, Reason}</code></td><td>Optional. Can isolate specific steps of initialization</td></tr><tr><td><code>application:stop/1</code></td><td>app shutting down</td><td><code>prop_stop(State)</code></td><td><code>State</code></td><td>Optional. Called before the supervision tree is shut down</td></tr><tr><td><code>application:stop/1</code></td><td>app shutting down</td><td><code>stop(State)</code></td><td><code>term()</code></td><td>called once the app is done running to clean things up</td></tr><tr><td>Hot code update</td><td>SASL’s release handler</td><td><code>config_change(Changed::[{K,V}], New::[{K,V}], Removed::[K])</code></td><td><code>ok</code></td><td>Called after a hot code update using the VM’s relup functionality, if the configuration values changed</td></tr></tbody></table>\n<h3 id=\"supervisors\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#supervisors\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Supervisors</h3>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Trigger</th><th>Called By</th><th>Handled By</th><th>Return</th><th>Description</th></tr></thead><tbody><tr><td><code>supervisor:start_link/2-3</code></td><td>parent process</td><td><code>init(Arg)</code></td><td><code>ignore &#x26;#124; {ok, {SupFlag, [Child]}}</code></td><td>Specifies a supervisor. Refer to official documentation</td></tr></tbody></table>\n<h3 id=\"gen_server\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#gen_server\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>gen_server</h3>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Trigger</th><th>Called By</th><th>Handled By</th><th>Return</th><th>Description</th></tr></thead><tbody><tr><td><code>gen_server:start_link/3-4</code></td><td>supervisor</td><td><code>init(Arg)</code></td><td><code>{ok, State [, Option]} &#x26;#124; ignore &#x26;#124; {stop, Reason}</code></td><td>Set up the initial state of the process</td></tr><tr><td><code>gen_server:call/2-3</code></td><td>client</td><td><code>handle_call(Msg, From, State)</code></td><td><code>{Type::reply &#x26;#124; noreply, State [, Option]} &#x26;#124; {stop, Reason [, Reply], State}</code></td><td>Request/response pattern. A message is received and expects an answer</td></tr><tr><td><code>gen_server:cast/2</code></td><td>client</td><td><code>handle_cast(Msg, State)</code></td><td><code>{noreply, State [, Option]} &#x26;#124; {stop, Reason, State}</code></td><td>Information sent to the process; fire and forget</td></tr><tr><td><code>Pid ! Msg</code></td><td>client</td><td><code>handle_info(Msg, State)</code></td><td>same as <code>handle_cast/2</code></td><td>Out-of-band messages, including monitor signals and <code>'EXIT'</code> messages when trappig exit</td></tr><tr><td>Setting an Option value to <code>{continue, Val}</code></td><td>the server itself</td><td><code>handle_continue(Val, State)</code></td><td>same as <code>handle_cast/2</code></td><td>Used to break longer operations into triggerable internal events</td></tr><tr><td><code>gen_server:stop/1,3</code></td><td>client or supervisor</td><td><code>terminate(Reason, State)</code></td><td><code>term()</code></td><td>Called when the process is shutting down willingly or through errors. If the process does not trap exits, this callback may be omitted</td></tr><tr><td><code>sys:get_status/2-3</code>, crash logs</td><td>client, the server itself</td><td><code>format_status(normal &#x26;#124; terminate, [PDict, State])</code></td><td><code>[{data, [{\"State\", Term}]}]</code></td><td>Used to add or remove information that would make it to debugging calls or error logs</td></tr><tr><td>N/A</td><td>supervisor</td><td><code>code_change(OldVsn, State, Extra)</code></td><td><code>{ok, NewState}</code></td><td>called to update a stateful process if the proper instructions are given during a hot code upgrade with releases</td></tr></tbody></table>\n<h3 id=\"gen_statem\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#gen_statem\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>gen_statem</h3>\n<h4 id=\"process-management\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#process-management\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Process management</h4>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Trigger</th><th>Called By</th><th>Handled By</th><th>Return</th><th>Description</th></tr></thead><tbody><tr><td><code>gen_statem:start_link/3-4</code></td><td>supervisor</td><td><code>init(Arg)</code></td><td><code>{ok, State, Data [, Actions]} &#x26;#124; ignore &#x26;#124; {stop, Reason}</code></td><td>Sets the initial state and data for the state machine</td></tr><tr><td>N/A</td><td>internal</td><td><code>callback_mode()</code></td><td><code>[state_functions &#x26;#124; handle_event_function [, state_enter]]</code></td><td>Defines the type of FSM and whether entering a state triggers a special internal event</td></tr><tr><td><code>gen_statem:stop/1,3</code></td><td>client or supervisor</td><td><code>terminate(Reason, State, Data)</code></td><td><code>term()</code></td><td>Called when the process is shutting down willingly or through errors. If the process does not trap exits, this callback may be omitted</td></tr><tr><td><code>sys:get_status/2-3</code>, crash logs</td><td>client, the server itself</td><td><code>format_status(normal &#x26;#124; terminate, [PDict, State, Data])</code></td><td><code>[{data, [{\"State\", Term}]}]</code></td><td>Used to add or remove information that would make it to debugging calls or error logs</td></tr><tr><td>N/A</td><td>supervisor</td><td><code>code_change(OldVsn, State, Data, Extra)</code></td><td><code>{ok, NewState, NewData}</code></td><td>called to update a stateful process if the proper instructions are given during a hot code upgrade with releases</td></tr></tbody></table>\n<h4 id=\"state-handling-and-transitions\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#state-handling-and-transitions\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>State handling and transitions</h4>\n<p>Handled by either <code>handle_event/4</code> or <code>StateName/3</code> functions, based on the value of <code>callback_mode()</code>.\nThe function signatures are either:</p>\n<ul>\n<li><code>handle_event(EventType, EventDetails, State, Data)</code></li>\n<li><code>State(EventType, EventDetails, Data)</code></li>\n</ul>\n<p>If the value of <code>State</code> is not a list, even though <code>callback_mode()</code> defined <code>state_functions</code>, then <code>handle_event/4</code> will be called. All possible return values for either functions are one of:</p>\n<ul>\n<li><code>{next_state, State, Data}</code></li>\n<li><code>{next_state, State, Data, [Actions, ...]}</code></li>\n<li><code>{stop, Reason, Data}</code></li>\n<li><code>{stop, Reason, Data, [Actions, ...]}</code></li>\n</ul>\n<p>Various short forms exist, such as <code>keep_state_and_data</code>, <code>{keep_state, Data}</code>, <code>{repeat_state, Data}</code>, and many more. Refer to the documentation for their content.</p>\n<p>The <code>Actions</code> value is any combination of the following list (non-inclusive): <code>postpone</code>, <code>{next_event, EventType, EventDetails}</code>, <code>hibernate</code>, <code>{timeout, Delay, EventDetails}</code>, <code>{state_timeout, Delay, EventDetails}</code>, <code>{reply, From, Reply}</code>. Consult the documentation for more options.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Trigger</th><th>Called By</th><th>Event Type</th><th>Event Details</th><th>Description</th></tr></thead><tbody><tr><td><code>gen_statem:call/2-3</code></td><td>client</td><td><code>{call, From}</code></td><td><code>term()</code></td><td>Request/response pattern. A message is received and is expected to receive an answer</td></tr><tr><td><code>gen_statem:cast/2</code></td><td>client</td><td><code>cast</code></td><td><code>term()</code></td><td>Information must be sent to the process; fire and forget</td></tr><tr><td><code>Pid ! Msg</code></td><td>client</td><td><code>info</code></td><td><code>Msg</code></td><td>Out-of-band messages, including monitor messages and 'EXIT' signals that are trapped</td></tr><tr><td><code>{timeout, T, Msg}</code></td><td><code>Action</code> return value</td><td><code>timeout</code></td><td><code>Msg</code></td><td>A specific timeout that can be set and received internally when the state machine has not received a new event in <code>T</code> milliseconds</td></tr><tr><td><code>{state_timeout, T, Msg}</code></td><td><code>Action</code> return value</td><td><code>state_timeout</code></td><td><code>Msg</code></td><td>A specific timeout that can be set and received internally when the state machine has not transitioned to a new different state in T milliseconds</td></tr><tr><td><code>{next_event, internal, Msg}</code></td><td><code>Action</code> return value</td><td><code>internal</code></td><td><code>Msg</code></td><td>Internal messages that can be generated by a state machine wanting to trigger itself without looking like external calls</td></tr></tbody></table>\n<h2 id=\"interpreting-erl_crash-dump\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#interpreting-erl_crash-dump\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Interpreting erl_crash dump</h2>\n<p><em>Reference: <a href=\"http://erlang.org/doc/apps/erts/crash_dump.html\">http://erlang.org/doc/apps/erts/crash_dump.html</a></em></p>\n<h2 id=\"docker-erlang-stuff\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#docker-erlang-stuff\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Docker erlang stuff</h2>\n<h3 id=\"run-erlang-using-docker-container\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#run-erlang-using-docker-container\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>run erlang using docker container</h3>\n<pre class=\"language-sh\"><code class=\"language-sh\">docker run -it --rm --name erlang-inst1 -v \"$PWD\":/usr/src/myapp -w /usr/src/myapp erlang:23-alpine erl\n</code></pre>\n<hr>\n<strong>Children</strong>\n<ol>\n<li><a href=\"/dendron-notes/notes/fbc7b495-4e18-4547-a795-9afa2805635a\">Data</a></li>\n<li><a href=\"/dendron-notes/notes/14c34d7c-644d-4cb8-9df3-d94cefa8fa74\">Syntax</a></li>\n<li><a href=\"/dendron-notes/notes/ac615334-69f5-4f93-9ec1-7baf7006485e\">Test</a></li>\n</ol>","noteIndex":{"id":"root","title":"root","desc":"","updated":1595961348801,"created":1595961348801,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":".","name":"vault","selfContained":true},"contentHash":"dad9815845eec627c937e34281a065d5","links":[],"anchors":{"root":{"type":"header","text":"Root","value":"root","line":8,"column":0,"depth":1}},"children":["ced683be-fe67-4022-989f-abc6d311cb3a","132fe0fe-fc74-4dbe-982a-9dcac677f664","a44df307-1a67-417b-b733-da109c3be441","b9686e84-d9a1-4dbb-8474-1a9c156d6d12","93a5dc42-8663-4d3c-924f-82e8faa35a67","f80d45a1-bd90-4097-96bc-0301fbc4d937","19992660-3602-4c64-a3a5-e9c05f19ffac","3f157f98-5c61-4479-b311-956d4b0ef67a"],"parent":null,"data":{},"body":"\n# Root\n\nThis is the root fo your dendron vault. If you decide to publish your entire vault, this will be your landing page. You are free to customize any part of this page except the frontmatter on top. \n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":true,"bubbleUpCreateNew":true,"vaultSelectionModeOnCreate":"smart","fuzzThreshold":0.2}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{}},"workspace":{"vaults":[{"fsPath":".","name":"vault","selfContained":true}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"maxPreviewsCached":10,"maxNoteLength":204800,"dendronVersion":"0.87.3","enableEditorDecorations":true,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"assetsPrefix":"/dendron-notes","copyAssets":true,"siteHierarchies":["root"],"enableSiteLastModified":true,"siteRootDir":"docs","siteUrl":"https://jackyhui96.github.io","enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"writeStubs":false,"seo":{"title":"Dendron Notes","description":"Personal knowledge space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitLab","editBranch":"main","editViewMode":"tree"},"enablePrettyLinks":true,"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}